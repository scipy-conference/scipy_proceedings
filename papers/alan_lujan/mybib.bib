@article{Harris2020,
  title        = {{Array programming with {NumPy}}},
  author       = {Harris, Charles R and Millman, K Jarrod and van der Walt,
                  Stéfan J and Gommers, Ralf and Virtanen, Pauli and Cournapeau,
                  David and Wieser, Eric and Taylor, Julian and Berg, Sebastian
                  and Smith, Nathaniel J and Kern, Robert and Picus, Matti and
                  Hoyer, Stephan and van Kerkwijk, Marten H and Brett, Matthew
                  and Haldane, Allan and del Río, Jaime Fernández and Wiebe,
                  Mark and Peterson, Pearu and Gérard-Marchant, Pierre and
                  Sheppard, Kevin and Reddy, Tyler and Weckesser, Warren and
                  Abbasi, Hameer and Gohlke, Christoph and Oliphant, Travis E},
  journaltitle = {Nature},
  publisher    = {Springer Science and Business Media LLC},
  volume       = {585},
  issue        = {7825},
  pages        = {357--362},
  date         = {2020-09-16},
  doi          = {10.1038/s41586-020-2649-2},
  pmc          = {PMC7759461},
  pmid         = {32939066},
  issn         = {0028-0836,1476-4687},
  abstract     = {Array programming provides a powerful, compact and expressive
                  syntax for accessing, manipulating and operating on data in
                  vectors, matrices and higher-dimensional arrays. NumPy is the
                  primary array programming library for the Python language. It
                  has an essential role in research analysis pipelines in fields
                  as diverse as physics, chemistry, astronomy, geoscience,
                  biology, psychology, materials science, engineering, finance
                  and economics. For example, in astronomy, NumPy was an
                  important part of the software stack used in the discovery of
                  gravitational waves1 and in the first imaging of a black
                  hole2. Here we review how a few fundamental array concepts
                  lead to a simple and powerful programming paradigm for
                  organizing, exploring and analysing scientific data. NumPy is
                  the foundation upon which the scientific Python ecosystem is
                  constructed. It is so pervasive that several projects,
                  targeting audiences with specialized needs, have developed
                  their own NumPy-like interfaces and array objects. Owing to
                  its central position in the ecosystem, NumPy increasingly acts
                  as an interoperability layer between such array computation
                  libraries and, together with its application programming
                  interface (API), provides a flexible framework to support the
                  next decade of scientific and industrial analysis.},
  urldate      = {2023-05-31},
  language     = {en}
}

@article{Virtanen2020,
  title        = {{{SciPy} 1.0: fundamental algorithms for scientific computing
                  in Python}},
  author       = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E and
                  Haberland, Matt and Reddy, Tyler and Cournapeau, David and
                  Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and
                  Bright, Jonathan and van der Walt, Stéfan J and Brett, Matthew
                  and Wilson, Joshua and Millman, K Jarrod and Mayorov, Nikolay
                  and Nelson, Andrew R J and Jones, Eric and Kern, Robert and
                  Larson, Eric and Carey, C J and Polat, İlhan and Feng, Yu and
                  Moore, Eric W and VanderPlas, Jake and Laxalde, Denis and
                  Perktold, Josef and Cimrman, Robert and Henriksen, Ian and
                  Quintero, E A and Harris, Charles R and Archibald, Anne M and
                  Ribeiro, Antônio H and Pedregosa, Fabian and van Mulbregt,
                  Paul and {SciPy 1.0 Contributors}},
  journaltitle = {Nature methods},
  publisher    = {Springer Science and Business Media LLC},
  volume       = {17},
  issue        = {3},
  pages        = {261--272},
  date         = {2020-03},
  doi          = {10.1038/s41592-019-0686-2},
  pmc          = {PMC7056644},
  pmid         = {32015543},
  issn         = {1548-7091,1548-7105},
  abstract     = {SciPy is an open-source scientific computing library for the
                  Python programming language. Since its initial release in
                  2001, SciPy has become a de facto standard for leveraging
                  scientific algorithms in Python, with over 600 unique code
                  contributors, thousands of dependent packages, over 100,000
                  dependent repositories and millions of downloads per year. In
                  this work, we provide an overview of the capabilities and
                  development practices of SciPy 1.0 and highlight some recent
                  technical developments.},
  language     = {en}
}

@misc{ThePandasDevelopmentTeam2020,
  title     = {{pandas-dev/pandas: Pandas}},
  author    = {{The Pandas Development Team}},
  publisher = {Zenodo},
  date      = {2020-02},
  doi       = {10.5281/zenodo.3509134},
  version   = {latest}
}

@article{Paszke2019,
  title        = {{PyTorch: An imperative style, high-performance deep learning
                  library}},
  author       = {Paszke, Adam and Gross, Sam and Massa, Francisco and Lerer,
                  Adam and Bradbury, James and Chanan, Gregory and Killeen,
                  Trevor and Lin, Zeming and Gimelshein, Natalia and Antiga,
                  Luca and Desmaison, Alban and Köpf, Andreas and Yang, Edward
                  and DeVito, Zach and Raison, Martin and Tejani, Alykhan and
                  Chilamkurthy, Sasank and Steiner, Benoit and Fang, Lu and Bai,
                  Junjie and Chintala, Soumith},
  journaltitle = {arXiv [cs. LG]},
  pages        = {8026--8037},
  date         = {2019-12-03},
  eprint       = {1912.01703},
  eprintclass  = {cs.LG},
  abstract     = {Deep learning frameworks have often focused on either
                  usability or speed, but not both. PyTorch is a machine
                  learning library that shows that these two goals are in fact
                  compatible: it provides an imperative and Pythonic programming
                  style that supports code as a model, makes debugging easy and
                  is consistent with other popular scientific computing
                  libraries, while remaining efficient and supporting hardware
                  accelerators such as GPUs. In this paper, we detail the
                  principles that drove the implementation of PyTorch and how
                  they are reflected in its architecture. We emphasize that
                  every aspect of PyTorch is a regular Python program under the
                  full control of its user. We also explain how the careful and
                  pragmatic implementation of the key components of its runtime
                  enables them to work together to achieve compelling
                  performance. We demonstrate the efficiency of individual
                  subsystems, as well as the overall speed of PyTorch on several
                  common benchmarks.},
  urldate      = {2023-03-01}
}

@software{Bradbury2018,
  type    = {software},
  title   = {{JAX: composable transformations of Python+NumPy programs}},
  author  = {Bradbury, James and Frostig, Roy and Hawkins, Peter and Johnson,
             Matthew James and Leary, Chris and Maclaurin, Dougal and Necula,
             George and Paszke, Adam and VanderPlas, Jake and Wanderman-Milne,
             Skye and Zhang, Qiao},
  date    = {2018},
  version = {0.3.13}
}

@online{Okuta2017,
  title     = {{CuPy: A NumPy-Compatible Library for NVIDIA GPU Calculations}},
  author    = {Okuta, Ryosuke and Unno, Yuya and Nishino, Daisuke and Hido,
               Shohei and Loomis, Crissman},
  booktitle = {{Proceedings of workshop on machine learning systems
               ({{LearningSys}}) in the thirty-first annual conference on neural
               information processing systems ({{NIPS})}}},
  date      = {2017},
  abstract  = {CuPy 1 is an open-source library with NumPy syntax that increases
               speed by doing matrix operations on NVIDIA GPUs. It is
               accelerated with the CUDA platform from NVIDIA and also uses
               CUDA-related libraries, including cuBLAS, cuDNN, cuRAND,
               cuSOLVER, cuSPARSE, and NCCL, to make full use of the GPU
               architecture. CuPy's interface is highly compatible with NumPy;
               in most cases it can be used as a drop-in replacement. CuPy
               supports various methods, data types, indexing, broadcasting, and
               more.},
  urldate   = {2023-06-22}
}

@inproceedings{Kluyver2016,
  title     = {{Jupyter Notebooks - a publishing format for reproducible
               computational workflows}},
  author    = {Kluyver, Thomas and Ragan-Kelley, Benjamin and Pérez, Fernando
               and Granger, Brian and Bussonnier, Matthias and Frederic,
               Jonathan and Kelley, Kyle and Hamrick, Jessica and Grout, Jason
               and Corlay, Sylvain and Ivanov, Paul and Avila, Damián and
               Abdalla, Safia and Willing, Carol and {Jupyter development team}},
  editor    = {Loizides, Fernando and Scmidt, Birgit},
  booktitle = {{Positioning and Power in Academic Publishing: Players, Agents
               and Agendas}},
  publisher = {IOS Press},
  location  = {Netherlands},
  pages     = {87--90},
  date      = {2016},
  abstract  = {It is increasingly necessary for researchers in all fields to
               write computer code, and in order to reproduce research results,
               it is important that this code is published. We present Jupyter
               notebooks, a document format for publishing code, results and
               explanations in a form that is both readable and executable. We
               discuss various tools and use cases for notebook documents.}
}

@inproceedings{Lam2015,
  title      = {{Numba: a {LLVM-based} Python {JIT} compiler}},
  author     = {Lam, Siu Kwan and Pitrou, Antoine and Seibert, Stanley},
  booktitle  = {{Proceedings of the Second Workshop on the {LLVM} Compiler
                Infrastructure in {HPC}}},
  publisher  = {ACM},
  location   = {New York, NY, USA},
  eventtitle = {SC15: The International Conference for High Performance
                Computing, Networking, Storage and Analysis},
  venue      = {Austin Texas},
  number     = {Article 7},
  pages      = {1--6},
  date       = {2015-11-15},
  doi        = {10.1145/2833157.2833162},
  isbn       = {9781450340052},
  abstract   = {Dynamic, interpreted languages, like Python, are attractive for
                domain-experts and scientists experimenting with new ideas.
                However, the performance of the interpreter is often a barrier
                when scaling to larger data sets. This paper presents a
                just-in-time compiler for Python that focuses in scientific and
                array-oriented computing. Starting with the simple syntax of
                Python, Numba compiles a subset of the language into efficient
                machine code that is comparable in performance to a traditional
                compiled language. In addition, we share our experience in
                building a JIT compiler using LLVM[1].},
  series     = {LLVM '15},
  urldate    = {2023-05-31}
}

@article{Barber2013,
  title        = {{Qhull: Quickhull algorithm for computing the convex hull}},
  author       = {Barber, C Bradford and Dobkin, David P and Huhdanpaa, Hannu},
  journaltitle = {Astrophysics Source Code Library},
  publisher    = {ui.adsabs.harvard.edu},
  pages        = {ascl:1304.016},
  date         = {2013},
  abstract     = {Qhull computes the convex hull, Delaunay triangulation,
                  Voronoi diagram, halfspace intersection about a point,
                  furthest-site Delaunay triangulation, and furthest-site
                  Voronoi diagram. The source code runs in 2-d, 3-d, 4-d, and
                  higher dimensions. Qhull implements the Quickhull algorithm
                  for computing the convex hull. It handles roundoff errors from
                  floating point arithmetic. It computes volumes, surface areas,
                  and approximations to the convex hull.},
  urldate      = {2024-06-04},
  language     = {en}
}

@inproceedings{Buitinck2013b,
  title     = {{API design for machine learning software: experiences from the
               scikit-learn project}},
  author    = {Buitinck, Lars and Louppe, Gilles and Blondel, Mathieu and
               Pedregosa, Fabian and Mueller, Andreas and Grisel, Olivier and
               Niculae, Vlad and Prettenhofer, Peter and Gramfort, Alexandre and
               Grobler, Jaques and Layton, Robert and VanderPlas, Jake and Joly,
               Arnaud and Holt, Brian and Varoquaux, Gaël},
  booktitle = {{ECML PKDD Workshop: Languages for Data Mining and Machine
               Learning}},
  pages     = {108--122},
  date      = {2013}
}

@article{Pedregosa2011,
  title        = {{{Scikit-learn}: {Machine} Learning in {Python}}},
  author       = {Pedregosa, Fabian and Varoquaux, G and Gramfort, Alexandre and
                  Michel, V and Thirion, B and Grisel, O and Blondel, Mathieu
                  and Louppe, Gilles and Prettenhofer, P and Weiss, Ron and
                  Weiss, Ron J and Vanderplas, J and Passos, Alexandre and
                  Cournapeau, D and Brucher, M and Perrot, M and Duchesnay, E},
  journaltitle = {Journal of machine learning research: JMLR},
  publisher    = {JMLR. org},
  volume       = {abs/1201.0490},
  pages        = {2825--2830},
  date         = {2011-02-01},
  issn         = {1532-4435,1533-7928},
  abstract     = {Scikit-learn is a Python module integrating a wide range of
                  state-of-the-art machine learning algorithms for medium-scale
                  supervised and unsupervised problems. This package focuses on
                  bringing machine learning to non-specialists using a
                  general-purpose high-level language. Emphasis is put on ease
                  of use, performance, documentation, and API consistency. It
                  has minimal dependencies and is distributed under the
                  simplified BSD license, encouraging its use in both academic
                  and commercial settings. Source code, binaries, and
                  documentation can be downloaded from
                  http://scikit-learn.sourceforge.net.}
}

@inproceedings{McKinney2010,
  title     = {{Data Structures for Statistical Computing in Python}},
  author    = {McKinney, Wes},
  editor    = {van der Walt, Stéfan and Millman, Jarrod},
  booktitle = {{Proceedings of the 9th Python in Science Conference}},
  pages     = {56--61},
  date      = {2010},
  doi       = {10.25080/Majora-92bf1922-00a}
}

@article{Hunter2007,
  title        = {{Matplotlib: {A 2D Graphics Environment}}},
  author       = {Hunter, John D},
  journaltitle = {Computing in science \& engineering},
  publisher    = {Institute of Electrical and Electronics Engineers (IEEE)},
  volume       = {9},
  issue        = {3},
  pages        = {90--95},
  date         = {2007-05},
  doi          = {10.1109/MCSE.2007.55},
  issn         = {1521-9615,1558-366X},
  abstract     = {Matplotlib is a 2D graphics package used for Python for
                  application development, interactive scripting, and
                  publication-quality image generation across user interfaces
                  and operating systems.}
}

@book{Fasshauer2007,
  title     = {{Meshfree approximation methods with matlab (with Cd-rom)}},
  author    = {Fasshauer, Gregory E},
  publisher = {World Scientific Publishing},
  location  = {Singapore, Singapore},
  date      = {2007-04-19},
  pagetotal = {520},
  doi       = {10.1142/ims},
  issn      = {1793-1355},
  isbn      = {9789812706331,9789812708632},
  series    = {Interdisciplinary mathematical sciences}
}

@article{Oliphant2007,
  title        = {{Python for {Scientific Computing}}},
  author       = {Oliphant, Travis E},
  journaltitle = {Computing in science \& engineering},
  publisher    = {Institute of Electrical and Electronics Engineers (IEEE)},
  volume       = {9},
  issue        = {3},
  pages        = {10--20},
  date         = {2007},
  doi          = {10.1109/MCSE.2007.58},
  issn         = {1521-9615,1558-366X},
  abstract     = {Python is an excellent "steering" language for scientific
                  codes written in other languages. However, with additional
                  basic tools, Python transforms into a high-level language
                  suited for scientific and engineering code that's often fast
                  enough to be immediately useful but also flexible enough to be
                  sped up with additional extensions.}
}

@book{Wahba199090b,
  title     = {{Spline models for observational data}},
  author    = {Wahba, Grace},
  publisher = {Society for Industrial and Applied Mathematics},
  date      = {1990-01},
  doi       = {10.1137/1.9781611970128},
  isbn      = {9780898712445,9781611970128},
  urldate   = {2024-06-04},
  language  = {en}
}


@article{Weiser1988,
  title        = {{A note on piecewise linear and multilinear table
                  interpolation in many dimensions}},
  author       = {Weiser, Alan and Zarantonello, Sergio E},
  journaltitle = {Mathematics of computation},
  publisher    = {American Mathematical Society (AMS)},
  volume       = {50},
  issue        = {181},
  pages        = {189--196},
  date         = {1988},
  doi          = {10.1090/s0025-5718-1988-0917826-0},
  issn         = {0025-5718,1088-6842},
  abstract     = {This note is concerned with N-dimensional rectangular table
                  interpolation, where N is relatively large (4 to 10). Two
                  interpolants are considered: a piecewise multilinear
                  generalization of piecewise bilinear interpolation on
                  rectangles, and a piecewise linear generalization of piecewise
                  linear interpolation on triangles. We show that the two
                  interpolants have similar approximation properties, but the
                  piecewise linear interpolant is much cheaper to evaluate.},
  language     = {en}
}

@article{Farin1986,
  title        = {{Triangular Bernstein-Bézier patches}},
  author       = {Farin, Gerald},
  journaltitle = {Computer aided geometric design},
  publisher    = {Elsevier BV},
  volume       = {3},
  issue        = {2},
  pages        = {83--127},
  date         = {1986-08-01},
  doi          = {10.1016/0167-8396(86)90016-6},
  issn         = {0167-8396,1879-2332},
  abstract     = {… the need for triangular patches . M. Sabin [Sabin '77]
                  worked on triangular patches in terms of … Among possibly more
                  people concerned with the development of triangular patches we
                  …},
  language     = {en}
}

@article{Alfeld1984,
  title        = {{A trivariate clough—tocher scheme for tetrahedral data}},
  author       = {Alfeld, Peter},
  journaltitle = {Computer aided geometric design},
  publisher    = {Elsevier BV},
  volume       = {1},
  issue        = {2},
  pages        = {169--181},
  date         = {1984-11-01},
  doi          = {10.1016/0167-8396(84)90029-3},
  issn         = {0167-8396,1879-2332},
  abstract     = {An interpolation scheme is described for values of position,
                  gradient and Hessian at scattered points in three variables.
                  The domain is assumed to have been tesselated into tetrahedra.
                  The interpolant has local support, is globally once
                  differentiable, piecewise polynomial, and reproduces
                  polynomials of degree up to three exactly. The scheme has been
                  implemented in a FORTRAN research code.},
  language     = {en}
}

@article{Renka1984b,
  title        = {{A TRIANGLE-BASED C¹ INTERPOLATION {METHOD}}},
  author       = {Renka, R J and Renka, R L and Cline, A K},
  journaltitle = {The Rocky Mountain Journal of Mathematics},
  publisher    = {Rocky Mountain Mathematics Consortium},
  volume       = {14},
  pages        = {223--237},
  date         = {1984},
  issn         = {1945-3795},
  abstract     = {[This paper discusses methods and software for C¹
                  interpolation at arbitrarily distributed data points in the
                  plane. The primary results presented here are
                  derivative-estimation procedures which lead to interpolatory
                  surfaces constituting very accurate approximations for a
                  variety of test functions.]}
}

@article{Nielson1983,
  title        = {{A method for interpolating scattered data based upon a
                  minimum norm network}},
  author       = {Nielson, Gregory M},
  journaltitle = {Mathematics of computation},
  publisher    = {American Mathematical Society (AMS)},
  volume       = {40},
  issue        = {161},
  pages        = {253--271},
  date         = {1983},
  doi          = {10.1090/s0025-5718-1983-0679444-7},
  issn         = {0025-5718,1088-6842},
  abstract     = {A method for interpolating scattered data is described. Given
                  ( x i , y i , z i ) , i = 1 , … , N ({x\_i},{y\_i},{z\_i}),i =
                  1, \ldots , N , a bivariate function S with continuous first
                  order partial derivatives is defined which has the property
                  that S ( x i , y i ) = z i , i = 1 , … , N S({x\_i},{y\_i}) =
                  {z\_i},i = 1, \ldots ,N . The method is based upon a
                  triangulation of the domain and a curve network which has
                  certain minimum pseudonorm properties. Algorithms and examples
                  are included.},
  urldate      = {2022-10-24},
  language     = {en}
}
