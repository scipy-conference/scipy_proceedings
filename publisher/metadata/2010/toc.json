{
  "toc": [
    {
      "video": "",
      "title": "Keeping the Chandra Satellite Cool with Python",
      "author_email": [
        "aldcroft@head.cfa.harvard.edu"
      ],
      "doi": "10.25080/Majora-92bf1922-000",
      "pages": 5,
      "bibliography": "",
      "author_institution_map": {
        "Tom Aldcroft": [
          "Smithsonian Astrophysical Observatory"
        ]
      },
      "copyright_holder": "Tom Aldcroft.",
      "author_institution": [
        "Smithsonian Astrophysical Observatory"
      ],
      "authors": "Tom Aldcroft",
      "paper_id": "aldcroft",
      "abstract": [
        "The Chandra X-ray Observatory has been providing groundbreaking astronomical\ndata since its launch by NASA in July of 1999.  Now starting the second decade\nof science the Chandra operations team has been using Python to create\npredictive thermal models of key spacecraft components.  These models are being\nused in the mission planning and command load review process to ensure that the\nseries of planned observations and attitudes for each week will maintain a safe\nthermal environment.  Speaking from my perspective as a scientist working to\ncreate and calibrate the models, I will discuss the process and the key\noff-the-shelf tools that made it all possible.  This includes fitting\nmany-parameter models with the Sherpa package, parallel computation with\nmpi4py/MPICH2, large table manipulations with pytables/HDF5, and of course fast\narray math with NumPy."
      ],
      "keywords": "telescope, NASA, MPI, astronomy, control",
      "page": {
        "start": 1,
        "stop": 5
      },
      "author": [
        "Tom Aldcroft"
      ]
    },
    {
      "video": "",
      "title": "Astrodata",
      "author_email": [
        "callen@gemini.edu"
      ],
      "doi": "10.25080/Majora-92bf1922-001",
      "pages": 6,
      "bibliography": "",
      "author_institution_map": {
        "Craig Allen": [
          "Gemini Observatory"
        ]
      },
      "copyright_holder": "Craig Allen.",
      "author_institution": [
        "Gemini Observatory"
      ],
      "authors": "Craig Allen",
      "paper_id": "allen",
      "abstract": [
        "The astrodata package is a part of the Gemini Telescope's python-based Data\nReduction Suite. It is designed to help us deal in a normalized way with\ndata from a variety of instruments and instrument-modes. All Gemini\nspecific code configurations are isolated in configuration packages\nseparate from the astrodata source.  The configuration packages define a\nlexicon of terms associated with a family of dataset types and implements\nthe behaviors associated with each terms."
      ],
      "keywords": "Python, Scientific Computing",
      "page": {
        "start": 6,
        "stop": 11
      },
      "author": [
        "Craig Allen"
      ]
    },
    {
      "video": "",
      "title": "Divisi: Learning from Semantic Networks and Sparse SVD",
      "author_email": [
        "rspeer@mit.edu",
        "kcarnold@mit.edu",
        "havasi@mit.edu"
      ],
      "doi": "10.25080/Majora-92bf1922-002",
      "pages": 6,
      "bibliography": "",
      "author_institution_map": {
        "Rob Speer": [
          "MIT Media Lab"
        ],
        "Catherine Havasi": [
          "MIT"
        ],
        "Kenneth Arnold": [
          "MIT"
        ]
      },
      "copyright_holder": "Rob Speer et al.",
      "author_institution": [
        "MIT Media Lab",
        "MIT",
        "MIT"
      ],
      "authors": "Rob Speer, Kenneth Arnold, Catherine Havasi",
      "paper_id": "arnold",
      "abstract": [
        "Singular value decomposition (SVD) is a powerful technique for finding\nsimilarities and patterns in large data sets. SVD has applications in\ntext analysis, bioinformatics, and recommender systems, and in\nparticular was used in many of the top entries to the Netflix\nChallenge. It can also help generalize and learn from knowledge\nrepresented in a sparse semantic network.",
        "Although this operation is fundamental to many fields, it requires a\nsignificant investment of effort to compute an SVD from sparse data\nusing Python tools. Divisi is an answer to this: it combines NumPy,\nPySparse, and an extension module wrapping SVDLIBC, to make Lanczos'\nalgorithm for sparse SVD easily usable within cross-platform Python\ncode.",
        "Divisi includes utilities for working with data in a variety of sparse\nformats, including semantic networks represented as edge lists or\nNetworkX graphs. It augments its matrices with labels, allowing you to\nkeep track of the meaning of your data as it passes through the SVD,\nand it can export the labeled data in a format suitable for separate\nvisualization GUIs."
      ],
      "keywords": "SVD, sparse, linear algebra, semantic networks, graph theory",
      "page": {
        "start": 12,
        "stop": 17
      },
      "author": [
        "Rob Speer",
        "Kenneth Arnold",
        "Catherine Havasi"
      ]
    },
    {
      "video": "",
      "title": "Theano: A CPU and GPU Math Compiler in Python",
      "author_email": [
        "james.bergstra@umontreal.ca",
        "breuleuo@iro.umontreal.ca",
        "bastienf@iro.umontreal.ca",
        "lamblinp@iro.umontreal.ca",
        "pascanur@iro.umontreal.ca",
        "desjagui@iro.umontreal.ca",
        "turian@iro.umontreal.ca",
        "wardefar@iro.umontreal.ca",
        "yoshua.bengio@umontreal.ca"
      ],
      "doi": "10.25080/Majora-92bf1922-003",
      "pages": 7,
      "bibliography": "",
      "author_institution_map": {
        "Frédéric Bastien": [
          "Université de Montréal"
        ],
        "Pascal Lamblin": [
          "Université de Montréal"
        ],
        "Guillaume Desjardins": [
          "Université de Montréal"
        ],
        "David Warde-Farley": [
          "Université de Montréal"
        ],
        "Yoshua Bengio": [
          "Université de Montréal"
        ],
        "Razvan Pascanu": [
          "Université de Montréal"
        ],
        "Joseph Turian": [
          "Université de Montréal"
        ],
        "Olivier Breuleux": [
          "Université de Montréal"
        ],
        "James Bergstra": [
          "Université de Montréal"
        ]
      },
      "copyright_holder": "James Bergstra et al.",
      "author_institution": [
        "Université de Montréal",
        "Université de Montréal",
        "Université de Montréal",
        "Université de Montréal",
        "Université de Montréal",
        "Université de Montréal",
        "Université de Montréal",
        "Université de Montréal",
        "Université de Montréal"
      ],
      "authors": "James Bergstra, Olivier Breuleux, Frédéric Bastien, Pascal Lamblin, Razvan Pascanu, Guillaume Desjardins, Joseph Turian, David Warde-Farley, Yoshua Bengio",
      "paper_id": "bergstra",
      "abstract": [
        "Theano is a compiler for mathematical expressions in Python that\ncombines the convenience of NumPy's syntax with the speed\nof optimized native machine language.\nThe user composes mathematical expressions in a high-level\ndescription that mimics NumPy's syntax and semantics, while being statically\ntyped and functional (as opposed to imperative).\nThese expressions allow Theano to provide symbolic differentiation.\nBefore performing computation, Theano optimizes the choice of expressions,\ntranslates them into C++ (or CUDA for GPU),\ncompiles them into dynamically loaded Python modules, all automatically.\nCommon machine learning algorithms implemented with Theano\nare from  to  faster\nthan competitive alternatives (including those implemented with\nC/C++, NumPy/SciPy and MATLAB) when compiled for the CPU\nand between  and  faster\nwhen compiled for the GPU.\nThis paper illustrates how to use\nTheano, outlines the scope of the compiler, provides benchmarks\non both CPU and GPU processors, and explains its overall design."
      ],
      "keywords": "GPU, CUDA, machine learning, optimization, compiler, NumPy",
      "page": {
        "start": 18,
        "stop": 24
      },
      "author": [
        "James Bergstra",
        "Olivier Breuleux",
        "Frédéric Bastien",
        "Pascal Lamblin",
        "Razvan Pascanu",
        "Guillaume Desjardins",
        "Joseph Turian",
        "David Warde-Farley",
        "Yoshua Bengio"
      ]
    },
    {
      "video": "",
      "title": "A High Performance Robot Vision Algorithm Implemented in Python",
      "author_email": [
        "sccolber@mail.usf.edu",
        "franzg@hs-weingarten.de",
        "woellhaf@hs-weingarten.de",
        "alqasemi@eng.usf.edu",
        "dubey@eng.usf.edu"
      ],
      "doi": "10.25080/Majora-92bf1922-004",
      "pages": 6,
      "bibliography": "",
      "author_institution_map": {
        "Konrad Woellhaf": [
          "University of Applied Sciences Ravensburg-Weingarten"
        ],
        "Steven C. Colbert": [
          "University of South Florida"
        ],
        "Redwan Alqasemi": [
          "University of South Florida"
        ],
        "Gregor Franz": [
          "University of Applied Sciences Ravensburg-Weingarten"
        ],
        "Rajiv Dubey": [
          "University of South Florida"
        ]
      },
      "copyright_holder": "Steven C. Colbert et al.",
      "author_institution": [
        "University of South Florida",
        "University of Applied Sciences Ravensburg-Weingarten",
        "University of Applied Sciences Ravensburg-Weingarten",
        "University of South Florida",
        "University of South Florida"
      ],
      "authors": "Steven C. Colbert, Gregor Franz, Konrad Woellhaf, Redwan Alqasemi, Rajiv Dubey",
      "paper_id": "colbert",
      "abstract": [
        "A crucial behavior for assistive robots that operate in unstructured domestic\nsettings is the ability to efficiently reconstruct the 3D geometry of novel\nobjects at run time using no a priori knowledge of the object. This\ngeometric information is critical for the robot to plan grasping and other\nmanipulation maneuvers, and it would be impractical to employ database driven\nor other prior knowledge based schemes since the number and variety of\nobjects that system may be tasked to manipulate are large.",
        "We have developed a robot vision algorithm capable of reconstructing the 3D\ngeometry of a novel object using only three images of the object captured from\na monocular camera in an eye-in-hand configuration. The reconstructions are\nsufficiently accurate approximations such that the system can use the\nrecovered model to plan grasping and manipulation maneuvers. The three images\nare captured from disparate locations and the object of interest segmented\nfrom the background and converted to a silhouette. The three silhouettes are\nused to approximate the surface of the object in the form of a point cloud.\nThe accuracy of the approximation is then refined by regressing an 11\nparameter superquadric to the cloud of points. The 11 parameters of the\nrecovered superquadric then serve as the model of the object.",
        "The entire system is implemented in Python and Python related projects. Image\nprocessing tasks are performed with NumPy arrays making use of Cython for\nperformance critical tasks. Camera calibration and image segmentation utilize\nthe Python bindings to the OpenCV library which are available in the\nscikits.image project. The non-linear constrained optimization uses the\nfmin\\_l\\_bfgs\\_b algorithm in scipy.optimize.  The algorithm was first vetted in\na simulation environment built on top of Enthought Traits and Mayavi.",
        "The hardware implementation utilizes the Python OpenOPC project to communicate\nwith and control a Kuka KR 6/2 six axis industrial manipulator. Images are\ncaptured via an Axis 207MW wireless network camera by issuing cgi requests  to\nthe camera with the urllib2 module. The image data is converted from JPEG to\nRGB raster format with the Python Imaging Library. The core algorithm runs as\na server on a standalone machine and is accessed using the XML-RPC protocol.\nNot including the time required for the robot to capture the images, the\nentire reconstruction process is executed, on average, in 300 milliseconds."
      ],
      "keywords": "computer vision, real-time, geometry, robotics",
      "page": {
        "start": 25,
        "stop": 30
      },
      "author": [
        "Steven C. Colbert",
        "Gregor Franz",
        "Konrad Woellhaf",
        "Redwan Alqasemi",
        "Rajiv Dubey"
      ]
    },
    {
      "video": "",
      "title": "Unusual Relationships: Python and Weaver Birds",
      "author_email": [
        "kadambari.devarajan@gmail.com"
      ],
      "doi": "10.25080/Majora-92bf1922-005",
      "pages": 5,
      "bibliography": "",
      "author_institution_map": {
        "Rajmonda Sulo": [
          "University of Illinois at Chicago"
        ],
        "Maria A. Echeverry-Galvis": [
          "Princeton University"
        ],
        "Kadambari Devarajan": [
          "University of Illinois at Chicago"
        ],
        "Jennifer K. Peterson": [
          "Princeton University"
        ]
      },
      "copyright_holder": "Kadambari Devarajan et al.",
      "author_institution": [
        "University of Illinois at Chicago",
        "Princeton University",
        "University of Illinois at Chicago",
        "Princeton University"
      ],
      "authors": "Kadambari Devarajan, Maria A. Echeverry-Galvis, Rajmonda Sulo, Jennifer K. Peterson",
      "paper_id": "devarajan",
      "abstract": [
        "As colonial birds, weaver birds nest in groups in very particular trees and\nface specific challenges in the selection and establishment of their\nnests. Socially-living individuals may organize themselves in particular\nconfigurations to decrease the probability of events that could be\ndetrimental to their own fitness. This organization within a selected area\ncould be dictated by biotic factors (such as predation, parasite invasion\nand/or thievery), or abiotic ones (like solar radiation, and protection\nfrom rain, among others), leading to a variety of arrangements. The\nparameters that individuals might evaluate while establishing/joining a\ncolony help pick the main evolutionary drivers for colonial living. Here,\nthe factors that determine the spatial relationships between the nests in a\ngiven tree are computationally modeled. We have built a computational model\nthat explains the spatial arrangement of the nests with bird species, tree\nmorphology, and the environment as factors.",
        "Python has been used significantly in the construction of the model,\nparticularly the machine learning libraries and visualization\ntoolkits. Python is used for the initial data processing, based on which,\nstatistical analysis and visualization are done. We use the PCA and\nregression tree algorithms to build a model that describes the main factors\naffecting the spatial arrangement of the nests and classify the nests based\non these factors. Visualization is used for determining key attributes in\nthe tree morphology, and nest characteristics, that might be better\npredictors of overall nest distribution. This aids in guiding other\nmodeling questions. NumPy arrays are used extensively, during the\nvisualization. Mayavi2 is used for the 3-D visualization and matplotlib is\nused for the representation of the results of statistical analysis."
      ],
      "keywords": "ecology, evolution, biology, ornithology, machine learning, visualization",
      "page": {
        "start": 31,
        "stop": 35
      },
      "author": [
        "Kadambari Devarajan",
        "Maria A. Echeverry-Galvis",
        "Rajmonda Sulo",
        "Jennifer K. Peterson"
      ]
    },
    {
      "video": "",
      "title": "Weather Forecast Accuracy Analysis",
      "author_email": [
        "eric@intellovations.com"
      ],
      "doi": "10.25080/Majora-92bf1922-006",
      "pages": 4,
      "bibliography": "",
      "author_institution_map": {
        "Eric Floehr": [
          "Intellovations, LLC"
        ]
      },
      "copyright_holder": "Eric Floehr.",
      "author_institution": [
        "Intellovations, LLC"
      ],
      "authors": "Eric Floehr",
      "paper_id": "floehr",
      "abstract": [
        "ForecastWatch is a weather forecast verification and accuracy analysis\nsystem that collects over 70,000 weather forecasts per day.  The system\nconsists of data capture, verification, aggregation, audit and display\ncomponents.  All components are written in Python.  The display component\nconsists of two websites, ForecastWatch.com, the commercial offering, and\nForecastAdvisor.com, the free consumer version, both implemented using the\nDjango web application framework.  In addition to providing comparative\nforecast accuracy analysis to commercial weather forecast providers like The\nWeather Channel, ForecastWatch data and systems have been instrumental in a\nnumber of research endeavors.  Dr. Eric Bickel, of the University of Texas\nat Austin, Dr. Bruce Rose of The Weather Channel, and Jungmin Lee of Florida\nInternational University have published research using data from\nForecastWatch and software written by Intellovations."
      ],
      "keywords": "weather, forecasting, web",
      "page": {
        "start": 36,
        "stop": 39
      },
      "author": [
        "Eric Floehr"
      ]
    },
    {
      "video": "",
      "title": "Rebuilding the Hubble Exposure Time Calculator",
      "author_email": [
        "perry@stsci.edu",
        "busko@stsci.edu",
        "rdiaz@stsci.edu",
        "laidler@stsci.edu",
        "jmiller@stsci.edu",
        "sienkiew@stsci.edu",
        "sosey@stsci.edu"
      ],
      "doi": "10.25080/Majora-92bf1922-007",
      "pages": 5,
      "bibliography": "",
      "author_institution_map": {
        "Todd Miller": [
          "Space Telescope Science Institute"
        ],
        "Mark Sienkiewicz": [
          "Space Telescope Science Institute"
        ],
        "Ivo Busko": [
          "Space Telescope Science Institute"
        ],
        "Vicki Laidler": [
          "Space Telescope Science Institute"
        ],
        "Rosa Diaz": [
          "Space Telescope Science Institute"
        ],
        "Perry Greenfield": [
          "Space Telescope Science Institute"
        ],
        "Megan Sosey": [
          "Space Telescope Science Institute"
        ]
      },
      "copyright_holder": "Perry Greenfield et al.",
      "author_institution": [
        "Space Telescope Science Institute",
        "Space Telescope Science Institute",
        "Space Telescope Science Institute",
        "Space Telescope Science Institute",
        "Space Telescope Science Institute",
        "Space Telescope Science Institute",
        "Space Telescope Science Institute"
      ],
      "authors": "Perry Greenfield, Ivo Busko, Rosa Diaz, Vicki Laidler, Todd Miller, Mark Sienkiewicz, Megan Sosey",
      "paper_id": "greenfield",
      "abstract": [
        "An Exposure Time Calculator (ETC) is an invaluable web tool for astronomers\nwishing to submit proposals to use the Hubble Space Telescope (HST). It\nprovide a means of estimating how much telescope time will be needed to\nobserve a specified source to the required accuracy.  The current HST ETC\nwas written in Java and has been used for several proposing cycles, but for\nvarious reasons has become difficult to maintain and keep reliable. Last\nyear we decided a complete rewrite—in Python, of course—was\nneeded and began an intensive effort to develop a well-tested replacement\nbefore the next proposing cycle this year.",
        "This paper will explain what the ETC does and outline the challenges\ninvolved in developing a new implementation that clearly demonstrates that\nit gets the right answers and meet the needed level of reliability\n(astronomers get cranky when the calculator stops working on the day before\nthe proposal deadline). The new ETC must be flexible enough to enable quick\nupdates for new features and accommodate changing data about HST\ninstruments. The architecture of the new system will allow Python-savvy\nastronomers to use the calculation engine directly for batch processing or\nscience exploration.",
        "Testing is a very large component of this effort, and we discuss how we use\nexisting test cases, as well as new systematic test generators to properly\nexplore parameter space for doing test comparisons, and a locally developed\ntest management system to monitor and efficiently analyze thousands of\ncomplex test cases."
      ],
      "keywords": "astronomy, telescope, Java, NASA",
      "page": {
        "start": 40,
        "stop": 44
      },
      "author": [
        "Perry Greenfield",
        "Ivo Busko",
        "Rosa Diaz",
        "Vicki Laidler",
        "Todd Miller",
        "Mark Sienkiewicz",
        "Megan Sosey"
      ]
    },
    {
      "video": "",
      "title": "Using Python with Smoke and JWST Mirrors",
      "author_email": [
        "hack@stsci.edu",
        "perry@stsci.edu",
        "saif@stsci.edu",
        "bente.h.eegholm@nasa.gov"
      ],
      "doi": "10.25080/Majora-92bf1922-008",
      "pages": 4,
      "bibliography": "",
      "author_institution_map": {
        "Warren J. Hack": [
          "Space Telescope Science Institute"
        ],
        "Babak Saif": [
          "Space Telescope Science Institute"
        ],
        "Perry Greenfield": [
          "Space Telescope Science Institute"
        ],
        "Bente Eegholm": [
          "Space Telescope Science Institute"
        ]
      },
      "copyright_holder": "Warren J. Hack et al.",
      "author_institution": [
        "Space Telescope Science Institute",
        "Space Telescope Science Institute",
        "Space Telescope Science Institute",
        "Space Telescope Science Institute"
      ],
      "authors": "Warren J. Hack, Perry Greenfield, Babak Saif, Bente Eegholm",
      "paper_id": "hack",
      "abstract": [
        "We will describe how the Space Telescope Science Institute is\nusing Python in support of the next large space telescope, the James Webb\nSpace Telescope (JWST). We will briefly describe the 6.5 meter\nsegmented-mirror infra-red telescope, currently planned for a\n2014 launch, and its science goals.  Our experience with Python\nhas already been employed to study the variation of the mirror\nand instrument support structures during cyrogenic cool-down from\nambient temperatures to 30 Kelvin with accuracies better than\n10 nanometers using a speckle interferometer. Python was used to\nmonitor, process (initially in near real-time) and analyze over 15\nTB of data collected. We are currently planning a metrology test\nthat will collect 10 TB of data in 7 minutes.\nWe will discuss the advantages of using\nPython for each of these projects."
      ],
      "keywords": "astronomy, telescope, NASA, measure, real-time, big data",
      "page": {
        "start": 45,
        "stop": 48
      },
      "author": [
        "Warren J. Hack",
        "Perry Greenfield",
        "Babak Saif",
        "Bente Eegholm"
      ]
    },
    {
      "video": "",
      "title": "Modeling Sudoku Puzzles with Python",
      "author_email": [
        "Sean\\_Davis@berea.edu",
        "Matthew\\_Henderson@berea.edu",
        "Andrew\\_Smith@berea.edu"
      ],
      "doi": "10.25080/Majora-92bf1922-009",
      "pages": 7,
      "bibliography": "",
      "author_institution_map": {
        "Sean Davis": [
          "Berea College"
        ],
        "Andrew Smith": [
          "Berea College"
        ],
        "Matthew Henderson": [
          "Berea College"
        ]
      },
      "copyright_holder": "Sean Davis et al.",
      "author_institution": [
        "Berea College",
        "Berea College",
        "Berea College"
      ],
      "authors": "Sean Davis, Matthew Henderson, Andrew Smith",
      "paper_id": "henderson",
      "abstract": [
        "The popular Sudoku puzzles which appear daily in newspapers the world over\nhave, lately, attracted the attention of mathematicians and computer\nscientists. There are many, difficult, unsolved problems about Sudoku\npuzzles and their generalizations which make them especially interesting to\nmathematicians. Also, as is well-known, the generalization of the Sudoku\npuzzle to larger dimension is an NP-complete problem and therefore of\nsubstantial interest to computer scientists.",
        "In this article we discuss the modeling of Sudoku puzzles in a variety of\ndifferent mathematical domains. We show how to use existing third-party\nPython libraries to implement these models. Those implementations, which\ninclude translations into the domains of constraint satisfaction, integer\nprogramming, polynomial calculus and graph theory, are available in an\nopen-source Python library sudoku.py developed by the authors and\navailable at http://bitbucket.org/matthew/scipy2010"
      ],
      "keywords": "sudoku, mathematics, graph theory",
      "page": {
        "start": 49,
        "stop": 55
      },
      "author": [
        "Sean Davis",
        "Matthew Henderson",
        "Andrew Smith"
      ]
    },
    {
      "video": "",
      "title": "Data Structures for Statistical Computing in Python",
      "author_email": [
        "wesmckinn@gmail.com"
      ],
      "doi": "10.25080/Majora-92bf1922-00a",
      "pages": 6,
      "bibliography": "",
      "author_institution_map": {
        "Wes McKinney": [
          "AQR Capital Management, LLC"
        ]
      },
      "copyright_holder": "Wes McKinney.",
      "author_institution": [
        "AQR Capital Management, LLC"
      ],
      "authors": "Wes McKinney",
      "paper_id": "mckinney",
      "abstract": [
        "In this paper we are concerned with the practical issues of working with\ndata sets common to finance, statistics, and other related\nfields. pandas is a new library which aims to facilitate working with\nthese data sets and to provide a set of fundamental building blocks for\nimplementing statistical models. We will discuss specific design issues\nencountered in the course of developing pandas with relevant examples\nand some comparisons with the R language. We conclude by discussing possible\nfuture directions for statistical computing and data analysis using Python."
      ],
      "keywords": "data structure, statistics, R",
      "page": {
        "start": 56,
        "stop": 61
      },
      "author": [
        "Wes McKinney"
      ]
    },
    {
      "video": "",
      "title": "Protein Folding with Python on Supercomputers",
      "author_email": [
        "j.meinke@fz-juelich.de"
      ],
      "doi": "10.25080/Majora-92bf1922-00b",
      "pages": 5,
      "bibliography": "",
      "author_institution_map": {
        "Jan H. Meinke": [
          "Jülich Supercomputing Centre"
        ]
      },
      "copyright_holder": "Jan H. Meinke.",
      "author_institution": [
        "Jülich Supercomputing Centre"
      ],
      "authors": "Jan H. Meinke",
      "paper_id": "meinke",
      "abstract": [
        "Today's supercomputers have hundreds of thousands of compute cores\nand this number is likely to grow. Many of today's algorithms will\nhave to be rethought to take advantage of such large systems.\nNew algorithms must provide fine grained parallelism and excellent\nscalability. Python offers good support for numerical libraries and\noffers bindings to MPI that can be used to develop parallel algorithms\nfor distributed memory machines.",
        "PySMMP provides bindings to the protein simulation package SMMP.\nCombined with mpi4py, PySMMP can be used to perform parallel\ntempering simulations of small proteins on the supercomputers JUGENE and\nJuRoPA. In this paper, the performance of the Fortran implementation of\nparallel tempering in SMMP is compared with the Python implementation in\nPySMMP. Both codes use the same Fortran code for the calculation of the\nenergy.",
        "The performance of the implementations is comparable on both machines,\nbut some challenges remain before the Python implementation can replace the\nFortran implementation for all production runs."
      ],
      "keywords": "parallel, MPI, biology, protein structure",
      "page": {
        "start": 62,
        "stop": 66
      },
      "author": [
        "Jan H. Meinke"
      ]
    },
    {
      "video": "",
      "title": "SpacePy - A Python-based Library of Tools for the Space Sciences",
      "author_email": [
        "smorley@lanl.gov",
        "dwelling@lanl.gov",
        "jkoller@lanl.gov",
        "balarsen@lanl.gov",
        "mghenderson@lanl.gov",
        "jniehof@lanl.gov"
      ],
      "doi": "10.25080/Majora-92bf1922-00c",
      "pages": 6,
      "bibliography": "",
      "author_institution_map": {
        "Steven K. Morley": [
          "Los Alamos National Laboratory"
        ],
        "Jonathan Niehof": [
          "Los Alamos National Laboratory"
        ],
        "Josef Koller": [
          "Los Alamos National Laboratory"
        ],
        "Daniel T. Welling": [
          "Los Alamos National Laboratory"
        ],
        "Michael G. Henderson": [
          "Los Alamos National Laboratory"
        ],
        "Brian A. Larsen": [
          "Los Alamos National Laboratory"
        ]
      },
      "copyright_holder": "Steven K. Morley et al.",
      "author_institution": [
        "Los Alamos National Laboratory",
        "Los Alamos National Laboratory",
        "Los Alamos National Laboratory",
        "Los Alamos National Laboratory",
        "Los Alamos National Laboratory",
        "Los Alamos National Laboratory"
      ],
      "authors": "Steven K. Morley, Daniel T. Welling, Josef Koller, Brian A. Larsen, Michael G. Henderson, Jonathan Niehof",
      "paper_id": "morley",
      "abstract": [
        "Space science deals with the bodies within the solar system and the\ninterplanetary medium; the primary focus is on atmospheres and above—at Earth the short timescale variation in the the geomagnetic field, the Van\nAllen radiation belts and the deposition of energy into the upper atmosphere\nare key areas of investigation.",
        "SpacePy is a package for Python, targeted at the space sciences, that aims\nto make basic data analysis, modeling and visualization easier. It builds on\nthe capabilities of the well-known NumPy and matplotlib\npackages. Publication quality output direct from analyses is emphasized. The\nSpacePy project seeks to promote accurate and open research standards by\nproviding an open environment for code development. In the space physics\ncommunity there has long been a significant reliance on proprietary\nlanguages that restrict free transfer of data and reproducibility of\nresults. By providing a comprehensive library of widely-used analysis and\nvisualization tools in a free, modern and intuitive language, we hope that\nthis reliance will be diminished for non-commercial users.",
        "SpacePy includes implementations of widely used empirical models,\nstatistical techniques used frequently in space science (e.g. superposed\nepoch analysis), and interfaces to advanced tools such as electron drift\nshell calculations for radiation belt studies. SpacePy also provides\nanalysis and visualization tools for components of the Space Weather\nModeling Framework including streamline tracing in vector fields.  Further\ndevelopment is currently underway. External libraries, which include\nwell-known magnetic field models, high-precision time conversions and\ncoordinate transformations are accessed from Python using ctypes and\nf2py. The rest of the tools have been implemented directly in Python.",
        "The provision of open-source tools to perform common tasks will provide\nopenness in the analysis methods employed in scientific studies and will\ngive access to advanced tools to all space scientists, currently\ndistribution is limited to non-commercial use."
      ],
      "keywords": "astronomy, atmospheric science, space weather, visualization",
      "page": {
        "start": 67,
        "stop": 72
      },
      "author": [
        "Steven K. Morley",
        "Daniel T. Welling",
        "Josef Koller",
        "Brian A. Larsen",
        "Michael G. Henderson",
        "Jonathan Niehof"
      ]
    },
    {
      "video": "",
      "title": "Numerical Pyromaniacs: The Use of Python in Fire Research",
      "author_email": [
        "koverholt@gmail.com"
      ],
      "doi": "10.25080/Majora-92bf1922-00d",
      "pages": 4,
      "bibliography": "",
      "author_institution_map": {
        "Kristopher Overholt": [
          "University of Texas at Austin"
        ]
      },
      "copyright_holder": "Kristopher Overholt.",
      "author_institution": [
        "University of Texas at Austin"
      ],
      "authors": "Kristopher Overholt",
      "paper_id": "overholt",
      "abstract": [
        "Python along with various numerical and scientific libraries was used to\ncreate tools that enable fire protection engineers to perform various\ncalculations and tasks including educational instruction, experimental work,\nand data visualization. Examples of web calculators and tools for creating\n3D geometry for fire models using Python are presented. The use of Python in\nthe fire research field will foster many new ideas, tools, and innovation in\nthe field of fire protection research and engineering."
      ],
      "keywords": "fire protection engineering, fluid dynamics, visualization",
      "page": {
        "start": 73,
        "stop": 76
      },
      "author": [
        "Kristopher Overholt"
      ]
    },
    {
      "video": "",
      "title": "A Programmatic Interface for Particle Plasma Simulation in Python",
      "author_email": [
        "minrk@berkeley.edu",
        "johnv@nuc.berkeley.edu"
      ],
      "doi": "10.25080/Majora-92bf1922-00e",
      "pages": 3,
      "bibliography": "",
      "author_institution_map": {
        "Min Ragan-Kelley": [
          "University of California, Berkeley"
        ],
        "John Verboncoeur": [
          "University of California, Berkeley"
        ]
      },
      "copyright_holder": "Min Ragan-Kelley et al.",
      "author_institution": [
        "University of California, Berkeley",
        "University of California, Berkeley"
      ],
      "authors": "Min Ragan-Kelley, John Verboncoeur",
      "paper_id": "ragan-kelley",
      "abstract": [
        "Particle-in-Cell (PIC) simulations are a popular approach to plasma physics\nproblems in a variety of applications. These simulations range from\ninteractive to very large, and are well suited to parallel architectures,\nsuch as GPUs. PIC simulations frequently serve as input to other\nsimulations, as a part of a larger system. Our project has two goals:\nfacilitate exploitation of increasing availability of parallel compute\nresources in PIC simulation, and provide an intuitive and efficient\nprogrammatic interface to these simulations. We plan to build a modular\nbackend with multiple levels of parallelism using tools such as\nPyCUDA/PyOpenCL and IPython. The modular design, following the goals of our\nObject-Oriented Particle-in-Cell (OOPIC) code this is to replace, enables\ncomparison of multiple algorithms and approaches. On the frontend, we will\nuse a runtime compilation model to generate an optimized simulation based on\navailable resources and input specification. Maintaining NumPy arrays as the\nfundamental data structure of diagnostics will allow users great flexibility\nfor data analysis, allowing the use of many existing powerful tools for\nPython, as well as the definition of arbitrary derivative diagnostics in\nflight. The general design and preliminary performance results with the\nPyCUDA backend will be presented. This project is early in development, and\ninput is welcome."
      ],
      "keywords": "simulation, CUDA, OpenCL, plasma, parallel",
      "page": {
        "start": 77,
        "stop": 79
      },
      "author": [
        "Min Ragan-Kelley",
        "John Verboncoeur"
      ]
    },
    {
      "video": "",
      "title": "PySPH: A Python Framework for Smoothed Particle Hydrodynamics",
      "author_email": [
        "prabhu@aero.iitb.ac.in",
        "shekhar@zeusnumerix.com"
      ],
      "doi": "10.25080/Majora-92bf1922-00f",
      "pages": 5,
      "bibliography": "",
      "author_institution_map": {
        "Chandrashekhar Kaushik": [
          "IIT Bombay"
        ],
        "Prabhu Ramachandran": [
          "IIT Bombay"
        ]
      },
      "copyright_holder": "Prabhu Ramachandran et al.",
      "author_institution": [
        "IIT Bombay",
        "IIT Bombay"
      ],
      "authors": "Prabhu Ramachandran, Chandrashekhar Kaushik",
      "paper_id": "ramachandran",
      "abstract": [
        "PySPH is a Python-based open source parallel framework for\nSmoothed Particle Hydrodynamics (SPH) simulations.  It is\ndistributed under a BSD license.  The performance critical parts are\nimplemented in Cython. The framework provides a load balanced,\nparallel execution of solvers.  It is designed to be easy to extend.\nIn this paper we describe the architecture of PySPH and how it can\nbe used.",
        "At it's core PySPH provides a particle kernel, an SPH kernel and a\nsolver framework.  Serial and parallel versions of solvers for some\nstandard problems are also provided.  The parallel solver uses\nmpi4py.  We employ a simple but elegant automatic load balancing\nstrategy for the parallelization.  Currently, we are able to perform\nfree surface simulations and some gas dynamics simulations.  PySPH\nis still a work in progress and we will discuss our future plans for\nthe project."
      ],
      "keywords": "parallel, Cython, fluid dynamics, simulation",
      "page": {
        "start": 80,
        "stop": 84
      },
      "author": [
        "Prabhu Ramachandran",
        "Chandrashekhar Kaushik"
      ]
    },
    {
      "video": "",
      "title": "Audio-Visual Speech Recognition using SciPy",
      "author_email": [
        "helge@ml.sun.ac.za",
        "herbst@sun.ac.za",
        "dupreez@sun.ac.za",
        "hebrecht@sun.ac.za"
      ],
      "doi": "10.25080/Majora-92bf1922-010",
      "pages": 7,
      "bibliography": "",
      "author_institution_map": {
        "Helge Reikeras": [],
        "Ben Herbst": [
          "Stellenbosch University"
        ],
        "Herman Engelbrecht": [
          "Stellenbosch University"
        ],
        "Johan du Preez": [
          "Stellenbosch University"
        ]
      },
      "copyright_holder": "Helge Reikeras et al.",
      "author_institution": [
        "Stellenbosch University",
        "Stellenbosch University",
        "Stellenbosch University"
      ],
      "authors": "Helge Reikeras, Ben Herbst, Johan du Preez, Herman Engelbrecht",
      "paper_id": "reikeras",
      "abstract": [
        "In audio-visual automatic speech recognition (AVASR) both acoustic and\nvisual modalities of speech are used to identify what a person is saying. In\nthis paper we propose a basic AVASR system implemented using SciPy, an open\nsource Python library for scientific computing.  AVASR research draws from\nthe fields of signal processing, computer vision and machine learning, all\nof which are active fields of development in the SciPy community. As such,\nAVASR researchers using SciPy are able to benefit from a wide range of tools\navailable in SciPy.",
        "The performance of the system is tested using the Clemson University\naudio-visual experiments (CUAVE) database. We find that visual speech\ninformation is in itself not sufficient for automatic speech\nrecognition. However, by integrating visual and acoustic speech information\nwe are able to obtain better performance than what is possible with\naudio-only ASR."
      ],
      "keywords": "speech recognition, machine learning, computer vision, signal processing",
      "page": {
        "start": 85,
        "stop": 91
      },
      "author": [
        "Helge Reikeras",
        "Ben Herbst",
        "Johan du Preez",
        "Herman Engelbrecht"
      ]
    },
    {
      "video": "",
      "title": "Statsmodels: Econometric and Statistical Modeling with Python",
      "author_email": [
        "jsseabold@gmail.com",
        "josef.pktd@gmail.com"
      ],
      "doi": "10.25080/Majora-92bf1922-011",
      "pages": 5,
      "bibliography": "",
      "author_institution_map": {
        "Josef Perktold": [
          "CIRANO, University of North Carolina Chapel Hill"
        ],
        "Skipper Seabold": [
          "American University"
        ]
      },
      "copyright_holder": "Skipper Seabold et al.",
      "author_institution": [
        "American University",
        "CIRANO, University of North Carolina Chapel Hill"
      ],
      "authors": "Skipper Seabold, Josef Perktold",
      "paper_id": "seabold",
      "abstract": [
        "Statsmodels is a library for statistical and econometric analysis in\nPython. This paper discusses the current relationship between\nstatistics and Python and open source more generally, outlining how the\nstatsmodels package fills a gap in this relationship.  An overview of\nstatsmodels is provided, including a discussion of the overarching design\nand philosophy, what can be found in the package, and some usage examples.\nThe paper concludes with a look at what the future holds."
      ],
      "keywords": "statistics, econometrics, R",
      "page": {
        "start": 92,
        "stop": 96
      },
      "author": [
        "Skipper Seabold",
        "Josef Perktold"
      ]
    }
  ]
}
